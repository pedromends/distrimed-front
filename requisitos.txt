
Teste TÃ©cnico â€“ Desenvolvedor Vue3, Quasar e Node.js (Express)
Objetivo
Criar um sistema de agendamento de salas de reuniÃ£o para uma empresa, permitindo que os usuÃ¡rios faÃ§am login e reservem uma das trÃªs salas disponÃ­veis. O sistema deve ter uma interface clara e intuitiva, alÃ©m de uma API organizada e funcional.
________________________________________
Requisitos do Sistema
1. Funcionalidades principais
âœ… Login de usuÃ¡rio (nÃ£o precisa autenticaÃ§Ã£o real, pode ser um mock/simulaÃ§Ã£o).

âœ… Listagem de trÃªs salas disponÃ­veis para agendamento. (PRONTO)
âœ… Interface para agendar uma reuniÃ£o escolhendo: (PRONTO)
â€¢	Sala desejada. (PRONTO)
â€¢	Data e horÃ¡rio de inÃ­cio. (PRONTO)
â€¢	Data de tÃ©rmino. (PRONTO)

âœ… ValidaÃ§Ãµes:
â€¢	NÃ£o permitir agendamento caso a sala jÃ¡ esteja reservada no horÃ¡rio desejado. (PRONTO)
â€¢	NÃ£o permitir agendamentos no passado. (PRONTO)

â€¢	Adicionais
âœ… Listagem de reuniÃµes agendadas. (PRONTO)
âœ… VisualizaÃ§Ã£o de agendamentos em um calendÃ¡rio interativo. (PRONTO)

âœ… Cancelamento de uma reuniÃ£o (somente pelo usuÃ¡rio que criou a reserva).
________________________________________
2. Requisitos tÃ©cnicos
â€¢	Frontend: Vue 3 com Quasar Framework. (PRONTO)
â€¢	Backend: API REST com Node.js e Express. (PRONTO)
â€¢	Banco de Dados: SQLite ou um JSON temporÃ¡rio para armazenar os agendamentos. (PRONTO)
â€¢	Hospedagem do cÃ³digo: O cÃ³digo deve ser versionado e enviado para um repositÃ³rio pÃºblico no GitHub. (PRONTO)
________________________________________
3. ValidaÃ§Ãµes ObrigatÃ³rias
1.	Evitar conflitos de horÃ¡rios â€“ Um usuÃ¡rio nÃ£o pode reservar uma sala caso ela jÃ¡ esteja ocupada no horÃ¡rio desejado. (PRONTO)
2.	Datas e horÃ¡rios coerentes â€“ O horÃ¡rio de inÃ­cio deve ser anterior ao horÃ¡rio de tÃ©rmino. (PRONTO)
3.	Agendamento futuro â€“ NÃ£o permitir reservas para horÃ¡rios passados. (PRONTO)
5.  NÃ£o permitir agendamento caso a sala jÃ¡ esteja reservada no horÃ¡rio desejado (PRONTO)

4.	Cancelamento restrito â€“ Somente o usuÃ¡rio que criou a reserva pode cancelÃ¡-la.
________________________________________
4. CritÃ©rios de AvaliaÃ§Ã£o
ğŸ“Œ CÃ³digo Limpo e Bem Estruturado â€“ OrganizaÃ§Ã£o, boas prÃ¡ticas e clareza.
ğŸ“Œ Uso correto do Quasar e Vue 3 â€“ ImplementaÃ§Ã£o de componentes e reutilizaÃ§Ã£o adequada.
ğŸ“Œ API REST organizada â€“ ImplementaÃ§Ã£o de rotas bem definidas no Express.
ğŸ“Œ Interface intuitiva e funcional â€“ UX amigÃ¡vel
ğŸ“Œ Responsivo â€“ NÃ£o obrigatÃ³rio.
ğŸ“Œ CalendÃ¡rio bem integrado â€“ ImplementaÃ§Ã£o de um calendÃ¡rio interativo para visualizar reservas.
ğŸ“Œ README completo â€“ ExplicaÃ§Ã£o clara sobre instalaÃ§Ã£o e uso do sistema.
________________________________________
5. Entrega do Projeto
1.	Criar um repositÃ³rio pÃºblico no GitHub.
2.	Implementar todas as funcionalidades e validaÃ§Ãµes descritas.
3.	No arquivo README.md, incluir:
o	IntroduÃ§Ã£o sobre o sistema.
o	Tecnologias utilizadas.
o	Como rodar o projeto localmente.
o	Estrutura do cÃ³digo (principais diretÃ³rios e arquivos).
4.	Enviar o link do repositÃ³rio para avaliaÃ§Ã£o.
